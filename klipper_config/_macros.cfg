#####################################################################
# Macros
#####################################################################
[gcode_macro G32]
gcode:
    G90 ; absolute positioning
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28 Z
    # G0 X150 Y150 Z30 F3600 ; Move nozzle to bed center

[gcode_macro CENTER]
gcode:
    MOVE_TO_POINT POINT=150,150

[gcode_macro LIGHT_ON]
gcode:
    # SET_LED LED=light RED=1.0 GREEN=0.82 BLUE=0.64 # 4000k

[gcode_macro LIGHT_OFF]
gcode:
    # SET_LED LED=light RED=0 GREEN=0 BLUE=0

[gcode_macro SCREEN_ON]
gcode:
    # Index 1 = display, Index 2 and 3 = Knob
    SET_LED LED=fysetc_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3

[gcode_macro SCREEN_OFF]
gcode:
    SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=3

[gcode_macro LIGHT]
gcode:
    {% if printer["neopixel light"].color_data[1].B == 0 %}
        LIGHT_ON
    {% else %}
        LIGHT_OFF
    {% endif %}


[gcode_macro Z_LEVEL_CLEAR]
gcode:
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=z_level VALUE=0

[gcode_macro REGISTER_Z_OFFSET]
gcode:
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=calibrate_z_offset VALUE={printer.gcode_move.homing_origin.z}

[gcode_macro MOVE_TO_POINT]
gcode:
    {% if params.POINT %}
        {% set point_x = params.POINT.split(",")[0]|float %}
        {% set point_y = params.POINT.split(",")[1]|float %}
        {% set speed = 300 * 60 %}
        G90
        G1 X{point_x} Y{point_y} F{speed}
    {% endif %}

[gcode_macro PARK_TO_BUCKET]
gcode:
    {% set bucket_start = printer["gcode_macro clean_nozzle"].bucket_start %}
    {% set bucket_left_width = printer["gcode_macro clean_nozzle"].bucket_left_width %}
    {% set bucket_gap = printer["gcode_macro clean_nozzle"].bucket_gap %}
    {% set bucket_right_width = printer["gcode_macro clean_nozzle"].bucket_right_width %}
    {% set brush_front = printer["gcode_macro clean_nozzle"].brush_front %}
    {% set brush_depth = printer["gcode_macro clean_nozzle"].brush_depth %}

    MOVE_TO_POINT POINT={bucket_start + bucket_left_width + bucket_gap + (bucket_right_width / 2)},{brush_front + (brush_depth / 2)}

[gcode_macro TEST]
gcode:
    # {% set foo = ((110 / 20) | int) * 20 %}
    # {% set bar = "temp_%d+" | format(foo) %}
    # {% set biz = bar + "+" %}
    # RESPOND MSG={bar}

    # M118 {} 
    M118 TEST START
    # Trick for trigger ready
    M118 {printer.idle_timeout.state}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={printer.heater_bed.target}
    M118 {printer.idle_timeout.state}
    # TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=-100 ; Ensure print to ready
    # RESPOND MSG={printer.quad_gantry_level.applied }
    M118 TEST END


[gcode_macro TEST2]
gcode:
    # {% set foo = ((110 / 20) | int) * 20 %}
    # {% set bar = "temp_%d+" | format(foo) %}
    # {% set biz = bar + "+" %}
    # RESPOND MSG={bar}

    # M118 {} 
    M118 TEST2 START
    # Trick for trigger ready
    M118 {printer.idle_timeout.state}
    TEST
    M118 {printer.idle_timeout.state}
    # TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=-100 ; Ensure print to ready
    # RESPOND MSG={printer.quad_gantry_level.applied }
    M118 TEST2 END



  